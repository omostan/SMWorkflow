// IMPORTANT: THIS IS MACHINE-GENERATED CODE
// PLEASE DO NOT EDIT
// Generated by Stateless Designer
// http://statelessdesigner.codeplex.com/

using Stateless;

namespace SMWorkflow.Model
{
  public class SMWorkflowMachine
  {
    public delegate void UnhandledTriggerDelegate(State state, Trigger trigger);
    public delegate void EntryExitDelegate();
    public delegate bool GuardClauseDelegate();

    public enum Trigger
    {
      Select,
      Insert,
      Check,
      Selected,
      Accepted,
      Rejected,
      Found,
      NotFound,
      Released,
    }

    public enum State
    {
      Start,
      Drink,
      Coin,
      Control,
      Search,
      Serving,
      Served,
    }

    private readonly StateMachine<State, Trigger> stateMachine = null;

    public EntryExitDelegate OnStartEntry = null;
    public EntryExitDelegate OnStartExit = null;
    public EntryExitDelegate OnDrinkEntry = null;
    public EntryExitDelegate OnDrinkExit = null;
    public EntryExitDelegate OnCoinEntry = null;
    public EntryExitDelegate OnCoinExit = null;
    public EntryExitDelegate OnControlEntry = null;
    public EntryExitDelegate OnControlExit = null;
    public EntryExitDelegate OnSearchEntry = null;
    public EntryExitDelegate OnSearchExit = null;
    public EntryExitDelegate OnServingEntry = null;
    public EntryExitDelegate OnServingExit = null;
    public EntryExitDelegate OnServedEntry = null;
    public EntryExitDelegate OnServedExit = null;
    public GuardClauseDelegate GuardClauseFromStartToDrinkUsingTriggerSelect = null;
    public GuardClauseDelegate GuardClauseFromStartToCoinUsingTriggerInsert = null;
    public GuardClauseDelegate GuardClauseFromDrinkToSearchUsingTriggerSelected = null;
    public GuardClauseDelegate GuardClauseFromCoinToControlUsingTriggerCheck = null;
    public GuardClauseDelegate GuardClauseFromControlToCoinUsingTriggerRejected = null;
    public GuardClauseDelegate GuardClauseFromControlToServingUsingTriggerAccepted = null;
    public GuardClauseDelegate GuardClauseFromSearchToDrinkUsingTriggerNotFound = null;
    public GuardClauseDelegate GuardClauseFromSearchToServingUsingTriggerFound = null;
    public GuardClauseDelegate GuardClauseFromServingToServedUsingTriggerReleased = null;
    public UnhandledTriggerDelegate OnUnhandledTrigger = null;

    public SMWorkflowMachine()
    {
      stateMachine = new StateMachine<State, Trigger>(State.Start);
      stateMachine.Configure(State.Start)
        .OnEntry(() => { if (OnStartEntry != null) OnStartEntry(); })
        .OnExit(() => { if (OnStartExit != null) OnStartExit(); })
        .PermitIf(Trigger.Select, State.Drink , () => { if (GuardClauseFromStartToDrinkUsingTriggerSelect != null) return GuardClauseFromStartToDrinkUsingTriggerSelect(); return true; } )
        .PermitIf(Trigger.Insert, State.Coin , () => { if (GuardClauseFromStartToCoinUsingTriggerInsert != null) return GuardClauseFromStartToCoinUsingTriggerInsert(); return true; } )
      ;
      stateMachine.Configure(State.Drink)
        .OnEntry(() => { if (OnDrinkEntry != null) OnDrinkEntry(); })
        .OnExit(() => { if (OnDrinkExit != null) OnDrinkExit(); })
        .PermitIf(Trigger.Selected, State.Search , () => { if (GuardClauseFromDrinkToSearchUsingTriggerSelected != null) return GuardClauseFromDrinkToSearchUsingTriggerSelected(); return true; } )
      ;
      stateMachine.Configure(State.Coin)
        .OnEntry(() => { if (OnCoinEntry != null) OnCoinEntry(); })
        .OnExit(() => { if (OnCoinExit != null) OnCoinExit(); })
        .PermitIf(Trigger.Check, State.Control , () => { if (GuardClauseFromCoinToControlUsingTriggerCheck != null) return GuardClauseFromCoinToControlUsingTriggerCheck(); return true; } )
      ;
      stateMachine.Configure(State.Control)
        .OnEntry(() => { if (OnControlEntry != null) OnControlEntry(); })
        .OnExit(() => { if (OnControlExit != null) OnControlExit(); })
        .PermitIf(Trigger.Rejected, State.Coin , () => { if (GuardClauseFromControlToCoinUsingTriggerRejected != null) return GuardClauseFromControlToCoinUsingTriggerRejected(); return true; } )
        .PermitIf(Trigger.Accepted, State.Serving , () => { if (GuardClauseFromControlToServingUsingTriggerAccepted != null) return GuardClauseFromControlToServingUsingTriggerAccepted(); return true; } )
      ;
      stateMachine.Configure(State.Search)
        .OnEntry(() => { if (OnSearchEntry != null) OnSearchEntry(); })
        .OnExit(() => { if (OnSearchExit != null) OnSearchExit(); })
        .PermitIf(Trigger.NotFound, State.Drink , () => { if (GuardClauseFromSearchToDrinkUsingTriggerNotFound != null) return GuardClauseFromSearchToDrinkUsingTriggerNotFound(); return true; } )
        .PermitIf(Trigger.Found, State.Serving , () => { if (GuardClauseFromSearchToServingUsingTriggerFound != null) return GuardClauseFromSearchToServingUsingTriggerFound(); return true; } )
      ;
      stateMachine.Configure(State.Serving)
        .OnEntry(() => { if (OnServingEntry != null) OnServingEntry(); })
        .OnExit(() => { if (OnServingExit != null) OnServingExit(); })
        .PermitIf(Trigger.Released, State.Served , () => { if (GuardClauseFromServingToServedUsingTriggerReleased != null) return GuardClauseFromServingToServedUsingTriggerReleased(); return true; } )
      ;
      stateMachine.Configure(State.Served)
        .OnEntry(() => { if (OnServedEntry != null) OnServedEntry(); })
        .OnExit(() => { if (OnServedExit != null) OnServedExit(); })
      ;
      stateMachine.OnUnhandledTrigger((state, trigger) => { if (OnUnhandledTrigger != null) OnUnhandledTrigger(state, trigger); });
    }

    public bool TryFireTrigger(Trigger trigger)
    {
      if (!stateMachine.CanFire(trigger))
      {
        return false;
      }
      stateMachine.Fire(trigger);
      return true;
    }

    public State GetState
    {
      get
      {
        return stateMachine.State;
      }
    }
  }
}