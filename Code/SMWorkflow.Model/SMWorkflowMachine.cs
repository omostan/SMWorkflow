// IMPORTANT: THIS IS MACHINE-GENERATED CODE
// PLEASE DO NOT EDIT
// Generated by Stateless Designer
// http://statelessdesigner.codeplex.com/

using Stateless;

namespace SMWorkflow.Model
{
  public class SMWorkflowMachine
  {
    public delegate void UnhandledTriggerDelegate(State state, Trigger trigger);
    public delegate void EntryExitDelegate();
    public delegate bool GuardClauseDelegate();

    public enum Trigger
    {
      Select,
      Insert,
      CheckMoney,
      SelectedDrink,
      EnoughMoney,
      Rejected,
      FoundDrink,
      NotFound,
      TakeDrink,
      RefundMoney,
      TakeChange,
    }

    public enum State
    {
      Idle,
      SelectDrink,
      CoinBox,
      ControlMoney,
      SearchDrink,
      ServingDrink,
      DrinkReady,
      MoneyRefunded,
    }

    private readonly StateMachine<State, Trigger> stateMachine = null;

    public EntryExitDelegate OnIdleEntry = null;
    public EntryExitDelegate OnIdleExit = null;
    public EntryExitDelegate OnSelectDrinkEntry = null;
    public EntryExitDelegate OnSelectDrinkExit = null;
    public EntryExitDelegate OnCoinBoxEntry = null;
    public EntryExitDelegate OnCoinBoxExit = null;
    public EntryExitDelegate OnControlMoneyEntry = null;
    public EntryExitDelegate OnControlMoneyExit = null;
    public EntryExitDelegate OnSearchDrinkEntry = null;
    public EntryExitDelegate OnSearchDrinkExit = null;
    public EntryExitDelegate OnServingDrinkEntry = null;
    public EntryExitDelegate OnServingDrinkExit = null;
    public EntryExitDelegate OnDrinkReadyEntry = null;
    public EntryExitDelegate OnDrinkReadyExit = null;
    public EntryExitDelegate OnMoneyRefundedEntry = null;
    public EntryExitDelegate OnMoneyRefundedExit = null;
    public GuardClauseDelegate GuardClauseFromIdleToSelectDrinkUsingTriggerSelect = null;
    public GuardClauseDelegate GuardClauseFromIdleToCoinBoxUsingTriggerInsert = null;
    public GuardClauseDelegate GuardClauseFromSelectDrinkToSearchDrinkUsingTriggerSelectedDrink = null;
    public GuardClauseDelegate GuardClauseFromCoinBoxToMoneyRefundedUsingTriggerRefundMoney = null;
    public GuardClauseDelegate GuardClauseFromCoinBoxToControlMoneyUsingTriggerCheckMoney = null;
    public GuardClauseDelegate GuardClauseFromControlMoneyToCoinBoxUsingTriggerRejected = null;
    public GuardClauseDelegate GuardClauseFromControlMoneyToServingDrinkUsingTriggerEnoughMoney = null;
    public GuardClauseDelegate GuardClauseFromSearchDrinkToSelectDrinkUsingTriggerNotFound = null;
    public GuardClauseDelegate GuardClauseFromSearchDrinkToServingDrinkUsingTriggerFoundDrink = null;
    public GuardClauseDelegate GuardClauseFromServingDrinkToDrinkReadyUsingTriggerTakeDrink = null;
    public GuardClauseDelegate GuardClauseFromDrinkReadyToMoneyRefundedUsingTriggerTakeChange = null;
    public GuardClauseDelegate GuardClauseFromMoneyRefundedToIdleUsingTriggerRefundMoney = null;
    public UnhandledTriggerDelegate OnUnhandledTrigger = null;

    public SMWorkflowMachine()
    {
      stateMachine = new StateMachine<State, Trigger>(State.Idle);
      stateMachine.Configure(State.Idle)
        .OnEntry(() => { if (OnIdleEntry != null) OnIdleEntry(); })
        .OnExit(() => { if (OnIdleExit != null) OnIdleExit(); })
        .PermitIf(Trigger.Select, State.SelectDrink , () => { if (GuardClauseFromIdleToSelectDrinkUsingTriggerSelect != null) return GuardClauseFromIdleToSelectDrinkUsingTriggerSelect(); return true; } )
        .PermitIf(Trigger.Insert, State.CoinBox , () => { if (GuardClauseFromIdleToCoinBoxUsingTriggerInsert != null) return GuardClauseFromIdleToCoinBoxUsingTriggerInsert(); return true; } )
      ;
      stateMachine.Configure(State.SelectDrink)
        .OnEntry(() => { if (OnSelectDrinkEntry != null) OnSelectDrinkEntry(); })
        .OnExit(() => { if (OnSelectDrinkExit != null) OnSelectDrinkExit(); })
        .PermitIf(Trigger.SelectedDrink, State.SearchDrink , () => { if (GuardClauseFromSelectDrinkToSearchDrinkUsingTriggerSelectedDrink != null) return GuardClauseFromSelectDrinkToSearchDrinkUsingTriggerSelectedDrink(); return true; } )
      ;
      stateMachine.Configure(State.CoinBox)
        .OnEntry(() => { if (OnCoinBoxEntry != null) OnCoinBoxEntry(); })
        .OnExit(() => { if (OnCoinBoxExit != null) OnCoinBoxExit(); })
        .PermitIf(Trigger.RefundMoney, State.MoneyRefunded , () => { if (GuardClauseFromCoinBoxToMoneyRefundedUsingTriggerRefundMoney != null) return GuardClauseFromCoinBoxToMoneyRefundedUsingTriggerRefundMoney(); return true; } )
        .PermitIf(Trigger.CheckMoney, State.ControlMoney , () => { if (GuardClauseFromCoinBoxToControlMoneyUsingTriggerCheckMoney != null) return GuardClauseFromCoinBoxToControlMoneyUsingTriggerCheckMoney(); return true; } )
      ;
      stateMachine.Configure(State.ControlMoney)
        .OnEntry(() => { if (OnControlMoneyEntry != null) OnControlMoneyEntry(); })
        .OnExit(() => { if (OnControlMoneyExit != null) OnControlMoneyExit(); })
        .PermitIf(Trigger.Rejected, State.CoinBox , () => { if (GuardClauseFromControlMoneyToCoinBoxUsingTriggerRejected != null) return GuardClauseFromControlMoneyToCoinBoxUsingTriggerRejected(); return true; } )
        .PermitIf(Trigger.EnoughMoney, State.ServingDrink , () => { if (GuardClauseFromControlMoneyToServingDrinkUsingTriggerEnoughMoney != null) return GuardClauseFromControlMoneyToServingDrinkUsingTriggerEnoughMoney(); return true; } )
      ;
      stateMachine.Configure(State.SearchDrink)
        .OnEntry(() => { if (OnSearchDrinkEntry != null) OnSearchDrinkEntry(); })
        .OnExit(() => { if (OnSearchDrinkExit != null) OnSearchDrinkExit(); })
        .PermitIf(Trigger.NotFound, State.SelectDrink , () => { if (GuardClauseFromSearchDrinkToSelectDrinkUsingTriggerNotFound != null) return GuardClauseFromSearchDrinkToSelectDrinkUsingTriggerNotFound(); return true; } )
        .PermitIf(Trigger.FoundDrink, State.ServingDrink , () => { if (GuardClauseFromSearchDrinkToServingDrinkUsingTriggerFoundDrink != null) return GuardClauseFromSearchDrinkToServingDrinkUsingTriggerFoundDrink(); return true; } )
      ;
      stateMachine.Configure(State.ServingDrink)
        .OnEntry(() => { if (OnServingDrinkEntry != null) OnServingDrinkEntry(); })
        .OnExit(() => { if (OnServingDrinkExit != null) OnServingDrinkExit(); })
        .PermitIf(Trigger.TakeDrink, State.DrinkReady , () => { if (GuardClauseFromServingDrinkToDrinkReadyUsingTriggerTakeDrink != null) return GuardClauseFromServingDrinkToDrinkReadyUsingTriggerTakeDrink(); return true; } )
      ;
      stateMachine.Configure(State.DrinkReady)
        .OnEntry(() => { if (OnDrinkReadyEntry != null) OnDrinkReadyEntry(); })
        .OnExit(() => { if (OnDrinkReadyExit != null) OnDrinkReadyExit(); })
        .PermitIf(Trigger.TakeChange, State.MoneyRefunded , () => { if (GuardClauseFromDrinkReadyToMoneyRefundedUsingTriggerTakeChange != null) return GuardClauseFromDrinkReadyToMoneyRefundedUsingTriggerTakeChange(); return true; } )
      ;
      stateMachine.Configure(State.MoneyRefunded)
        .OnEntry(() => { if (OnMoneyRefundedEntry != null) OnMoneyRefundedEntry(); })
        .OnExit(() => { if (OnMoneyRefundedExit != null) OnMoneyRefundedExit(); })
        .PermitIf(Trigger.RefundMoney, State.Idle , () => { if (GuardClauseFromMoneyRefundedToIdleUsingTriggerRefundMoney != null) return GuardClauseFromMoneyRefundedToIdleUsingTriggerRefundMoney(); return true; } )
      ;
      stateMachine.OnUnhandledTrigger((state, trigger) => { if (OnUnhandledTrigger != null) OnUnhandledTrigger(state, trigger); });
    }

    public bool TryFireTrigger(Trigger trigger)
    {
      if (!stateMachine.CanFire(trigger))
      {
        return false;
      }
      stateMachine.Fire(trigger);
      return true;
    }

    public State GetState
    {
      get
      {
        return stateMachine.State;
      }
    }
  }
}